/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>
#ifndef DBUS_TYPE_G_STRING_VALUE_HASHTABLE
#define DBUS_TYPE_G_STRING_VALUE_HASHTABLE (dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE))
#endif

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_bansheeproject_Banshee_ClientWindow
#define DBUS_GLIB_CLIENT_WRAPPERS_org_bansheeproject_Banshee_ClientWindow

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_bansheeproject_Banshee_ClientWindow_present (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Present", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_bansheeproject_Banshee_ClientWindow_present_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_bansheeproject_Banshee_ClientWindow_present_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_bansheeproject_Banshee_ClientWindow_present_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_bansheeproject_Banshee_ClientWindow_present_async (DBusGProxy *proxy, org_bansheeproject_Banshee_ClientWindow_present_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Present", org_bansheeproject_Banshee_ClientWindow_present_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_bansheeproject_Banshee_ClientWindow_hide (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Hide", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_bansheeproject_Banshee_ClientWindow_hide_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_bansheeproject_Banshee_ClientWindow_hide_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_bansheeproject_Banshee_ClientWindow_hide_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_bansheeproject_Banshee_ClientWindow_hide_async (DBusGProxy *proxy, org_bansheeproject_Banshee_ClientWindow_hide_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Hide", org_bansheeproject_Banshee_ClientWindow_hide_async_callback, stuff, g_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_bansheeproject_Banshee_ClientWindow */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_bansheeproject_Banshee_PlaybackController
#define DBUS_GLIB_CLIENT_WRAPPERS_org_bansheeproject_Banshee_PlaybackController

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_bansheeproject_Banshee_PlaybackController_first (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "First", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_bansheeproject_Banshee_PlaybackController_first_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_bansheeproject_Banshee_PlaybackController_first_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_bansheeproject_Banshee_PlaybackController_first_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_bansheeproject_Banshee_PlaybackController_first_async (DBusGProxy *proxy, org_bansheeproject_Banshee_PlaybackController_first_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "First", org_bansheeproject_Banshee_PlaybackController_first_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_bansheeproject_Banshee_PlaybackController_next (DBusGProxy *proxy, const gboolean IN_restart, GError **error)

{
  return dbus_g_proxy_call (proxy, "Next", error, G_TYPE_BOOLEAN, IN_restart, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_bansheeproject_Banshee_PlaybackController_next_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_bansheeproject_Banshee_PlaybackController_next_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_bansheeproject_Banshee_PlaybackController_next_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_bansheeproject_Banshee_PlaybackController_next_async (DBusGProxy *proxy, const gboolean IN_restart, org_bansheeproject_Banshee_PlaybackController_next_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Next", org_bansheeproject_Banshee_PlaybackController_next_async_callback, stuff, g_free, G_TYPE_BOOLEAN, IN_restart, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_bansheeproject_Banshee_PlaybackController_previous (DBusGProxy *proxy, const gboolean IN_restart, GError **error)

{
  return dbus_g_proxy_call (proxy, "Previous", error, G_TYPE_BOOLEAN, IN_restart, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_bansheeproject_Banshee_PlaybackController_previous_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_bansheeproject_Banshee_PlaybackController_previous_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_bansheeproject_Banshee_PlaybackController_previous_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_bansheeproject_Banshee_PlaybackController_previous_async (DBusGProxy *proxy, const gboolean IN_restart, org_bansheeproject_Banshee_PlaybackController_previous_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Previous", org_bansheeproject_Banshee_PlaybackController_previous_async_callback, stuff, g_free, G_TYPE_BOOLEAN, IN_restart, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_bansheeproject_Banshee_PlaybackController */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_bansheeproject_Banshee_PlayerEngine
#define DBUS_GLIB_CLIENT_WRAPPERS_org_bansheeproject_Banshee_PlayerEngine

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_bansheeproject_Banshee_PlayerEngine_open (DBusGProxy *proxy, const char * IN_uri, GError **error)

{
  return dbus_g_proxy_call (proxy, "Open", error, G_TYPE_STRING, IN_uri, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_bansheeproject_Banshee_PlayerEngine_open_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_bansheeproject_Banshee_PlayerEngine_open_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_bansheeproject_Banshee_PlayerEngine_open_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_bansheeproject_Banshee_PlayerEngine_open_async (DBusGProxy *proxy, const char * IN_uri, org_bansheeproject_Banshee_PlayerEngine_open_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Open", org_bansheeproject_Banshee_PlayerEngine_open_async_callback, stuff, g_free, G_TYPE_STRING, IN_uri, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_bansheeproject_Banshee_PlayerEngine_close (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Close", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_bansheeproject_Banshee_PlayerEngine_close_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_bansheeproject_Banshee_PlayerEngine_close_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_bansheeproject_Banshee_PlayerEngine_close_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_bansheeproject_Banshee_PlayerEngine_close_async (DBusGProxy *proxy, org_bansheeproject_Banshee_PlayerEngine_close_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Close", org_bansheeproject_Banshee_PlayerEngine_close_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_bansheeproject_Banshee_PlayerEngine_pause (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Pause", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_bansheeproject_Banshee_PlayerEngine_pause_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_bansheeproject_Banshee_PlayerEngine_pause_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_bansheeproject_Banshee_PlayerEngine_pause_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_bansheeproject_Banshee_PlayerEngine_pause_async (DBusGProxy *proxy, org_bansheeproject_Banshee_PlayerEngine_pause_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Pause", org_bansheeproject_Banshee_PlayerEngine_pause_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_bansheeproject_Banshee_PlayerEngine_play (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Play", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_bansheeproject_Banshee_PlayerEngine_play_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_bansheeproject_Banshee_PlayerEngine_play_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_bansheeproject_Banshee_PlayerEngine_play_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_bansheeproject_Banshee_PlayerEngine_play_async (DBusGProxy *proxy, org_bansheeproject_Banshee_PlayerEngine_play_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Play", org_bansheeproject_Banshee_PlayerEngine_play_async_callback, stuff, g_free, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_bansheeproject_Banshee_PlayerEngine_get_currentstate (DBusGProxy *proxy, gchar** currentState, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetCurrentState", error, G_TYPE_INVALID, G_TYPE_STRING, currentState, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_bansheeproject_Banshee_PlayerEngine_get_currenttrack (DBusGProxy *proxy, GHashTable** currentState, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetCurrentTrack", error, G_TYPE_INVALID, DBUS_TYPE_G_STRING_VALUE_HASHTABLE, currentState, G_TYPE_INVALID);
}


static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_bansheeproject_Banshee_PlayerEngine_toggle_playing (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "TogglePlaying", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_bansheeproject_Banshee_PlayerEngine_toggle_playing_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_bansheeproject_Banshee_PlayerEngine_toggle_playing_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_bansheeproject_Banshee_PlayerEngine_toggle_playing_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_bansheeproject_Banshee_PlayerEngine_toggle_playing_async (DBusGProxy *proxy, org_bansheeproject_Banshee_PlayerEngine_toggle_playing_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "TogglePlaying", org_bansheeproject_Banshee_PlayerEngine_toggle_playing_async_callback, stuff, g_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_bansheeproject_Banshee_PlayerEngine */

G_END_DECLS
