/* Generated by dbus-binding-tool; do not edit! */

#include <glib/gtypes.h>
#include <glib/gerror.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_net_sacredchao_QuodLibet
#define DBUS_GLIB_CLIENT_WRAPPERS_net_sacredchao_QuodLibet

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
net_sacredchao_QuodLibet_get_position (DBusGProxy *proxy, guint* OUT_actPos, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetPosition", error, G_TYPE_INVALID, G_TYPE_UINT, OUT_actPos, G_TYPE_INVALID);
}

typedef void (*net_sacredchao_QuodLibet_get_position_reply) (DBusGProxy *proxy, guint OUT_actPos, GError *error, gpointer userdata);

static void
net_sacredchao_QuodLibet_get_position_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  guint OUT_actPos;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_UINT, &OUT_actPos, G_TYPE_INVALID);
  (*(net_sacredchao_QuodLibet_get_position_reply)data->cb) (proxy, OUT_actPos, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
net_sacredchao_QuodLibet_get_position_async (DBusGProxy *proxy, net_sacredchao_QuodLibet_get_position_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetPosition", net_sacredchao_QuodLibet_get_position_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
net_sacredchao_QuodLibet_is_playing (DBusGProxy *proxy, gboolean* OUT_bRet, GError **error)

{
  return dbus_g_proxy_call (proxy, "IsPlaying", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_bRet, G_TYPE_INVALID);
}

typedef void (*net_sacredchao_QuodLibet_is_playing_reply) (DBusGProxy *proxy, gboolean OUT_bRet, GError *error, gpointer userdata);

static void
net_sacredchao_QuodLibet_is_playing_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_bRet;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_bRet, G_TYPE_INVALID);
  (*(net_sacredchao_QuodLibet_is_playing_reply)data->cb) (proxy, OUT_bRet, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
net_sacredchao_QuodLibet_is_playing_async (DBusGProxy *proxy, net_sacredchao_QuodLibet_is_playing_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "IsPlaying", net_sacredchao_QuodLibet_is_playing_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
net_sacredchao_QuodLibet_current_song (DBusGProxy *proxy, GHashTable** OUT_songProps, GError **error)

{
  return dbus_g_proxy_call (proxy, "CurrentSong", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), OUT_songProps, G_TYPE_INVALID);
}

typedef void (*net_sacredchao_QuodLibet_current_song_reply) (DBusGProxy *proxy, GHashTable *OUT_songProps, GError *error, gpointer userdata);

static void
net_sacredchao_QuodLibet_current_song_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_songProps;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_STRING), &OUT_songProps, G_TYPE_INVALID);
  (*(net_sacredchao_QuodLibet_current_song_reply)data->cb) (proxy, OUT_songProps, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
net_sacredchao_QuodLibet_current_song_async (DBusGProxy *proxy, net_sacredchao_QuodLibet_current_song_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "CurrentSong", net_sacredchao_QuodLibet_current_song_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
net_sacredchao_QuodLibet_next (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Next", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*net_sacredchao_QuodLibet_next_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
net_sacredchao_QuodLibet_next_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(net_sacredchao_QuodLibet_next_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
net_sacredchao_QuodLibet_next_async (DBusGProxy *proxy, net_sacredchao_QuodLibet_next_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Next", net_sacredchao_QuodLibet_next_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
net_sacredchao_QuodLibet_previous (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Previous", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*net_sacredchao_QuodLibet_previous_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
net_sacredchao_QuodLibet_previous_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(net_sacredchao_QuodLibet_previous_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
net_sacredchao_QuodLibet_previous_async (DBusGProxy *proxy, net_sacredchao_QuodLibet_previous_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Previous", net_sacredchao_QuodLibet_previous_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
net_sacredchao_QuodLibet_is_playing (DBusGProxy *proxy, gboolean* OUT_bIsPlaying, GError **error)

{
  return dbus_g_proxy_call (proxy, "IsPlaying", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_bIsPlaying, G_TYPE_INVALID);
}

typedef void (*net_sacredchao_QuodLibet_is_playing_reply) (DBusGProxy *proxy, gboolean OUT_bIsPlaying, GError *error, gpointer userdata);

static void
net_sacredchao_QuodLibet_is_playing_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_bIsPlaying;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_bIsPlaying, G_TYPE_INVALID);
  (*(net_sacredchao_QuodLibet_is_playing_reply)data->cb) (proxy, OUT_bIsPlaying, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
net_sacredchao_QuodLibet_is_playing_async (DBusGProxy *proxy, net_sacredchao_QuodLibet_is_playing_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "IsPlaying", net_sacredchao_QuodLibet_is_playing_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
net_sacredchao_QuodLibet_pause (DBusGProxy *proxy, gboolean* OUT_bIsPaused, GError **error)

{
  return dbus_g_proxy_call (proxy, "Pause", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_bIsPaused, G_TYPE_INVALID);
}

typedef void (*net_sacredchao_QuodLibet_pause_reply) (DBusGProxy *proxy, gboolean OUT_bIsPaused, GError *error, gpointer userdata);

static void
net_sacredchao_QuodLibet_pause_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_bIsPaused;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_bIsPaused, G_TYPE_INVALID);
  (*(net_sacredchao_QuodLibet_pause_reply)data->cb) (proxy, OUT_bIsPaused, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
net_sacredchao_QuodLibet_pause_async (DBusGProxy *proxy, net_sacredchao_QuodLibet_pause_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Pause", net_sacredchao_QuodLibet_pause_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
net_sacredchao_QuodLibet_play (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Play", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*net_sacredchao_QuodLibet_play_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
net_sacredchao_QuodLibet_play_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(net_sacredchao_QuodLibet_play_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
net_sacredchao_QuodLibet_play_async (DBusGProxy *proxy, net_sacredchao_QuodLibet_play_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Play", net_sacredchao_QuodLibet_play_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
net_sacredchao_QuodLibet_play_pause (DBusGProxy *proxy, gboolean* OUT_bIsPaused, GError **error)

{
  return dbus_g_proxy_call (proxy, "PlayPause", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_bIsPaused, G_TYPE_INVALID);
}

typedef void (*net_sacredchao_QuodLibet_play_pause_reply) (DBusGProxy *proxy, gboolean OUT_bIsPaused, GError *error, gpointer userdata);

static void
net_sacredchao_QuodLibet_play_pause_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_bIsPaused;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_bIsPaused, G_TYPE_INVALID);
  (*(net_sacredchao_QuodLibet_play_pause_reply)data->cb) (proxy, OUT_bIsPaused, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
net_sacredchao_QuodLibet_play_pause_async (DBusGProxy *proxy, net_sacredchao_QuodLibet_play_pause_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "PlayPause", net_sacredchao_QuodLibet_play_pause_async_callback, stuff, g_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_net_sacredchao_QuodLibet */

G_END_DECLS
