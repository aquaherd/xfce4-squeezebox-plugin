/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_exaile_ExaileInterface
#define DBUS_GLIB_CLIENT_WRAPPERS_org_exaile_ExaileInterface

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_ExaileInterface_get_track_attr (DBusGProxy *proxy, const char * IN_attr, char ** OUT_attr, GError **error)

{
  return dbus_g_proxy_call (proxy, "get_track_attr", error, G_TYPE_STRING, IN_attr, G_TYPE_INVALID, G_TYPE_STRING, OUT_attr, G_TYPE_INVALID);
}

typedef void (*org_exaile_ExaileInterface_get_track_attr_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_exaile_ExaileInterface_get_track_attr_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_exaile_ExaileInterface_get_track_attr_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_exaile_ExaileInterface_get_track_attr_async (DBusGProxy *proxy, const char * IN_attr, org_exaile_ExaileInterface_get_track_attr_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "get_track_attr", org_exaile_ExaileInterface_get_track_attr_async_callback, stuff, g_free, G_TYPE_STRING, IN_attr, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_ExaileInterface_play (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "play", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_exaile_ExaileInterface_play_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_exaile_ExaileInterface_play_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_exaile_ExaileInterface_play_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_exaile_ExaileInterface_play_async (DBusGProxy *proxy, org_exaile_ExaileInterface_play_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "play", org_exaile_ExaileInterface_play_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_ExaileInterface_current_position (DBusGProxy *proxy, guchar* OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "current_position", error, G_TYPE_INVALID, G_TYPE_UCHAR, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_exaile_ExaileInterface_current_position_reply) (DBusGProxy *proxy, guchar OUT_arg0, GError *error, gpointer userdata);

static void
org_exaile_ExaileInterface_current_position_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  guchar OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_UCHAR, &OUT_arg0, G_TYPE_INVALID);
  (*(org_exaile_ExaileInterface_current_position_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_exaile_ExaileInterface_current_position_async (DBusGProxy *proxy, org_exaile_ExaileInterface_current_position_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "current_position", org_exaile_ExaileInterface_current_position_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_ExaileInterface_play_pause (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "play_pause", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_exaile_ExaileInterface_play_pause_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_exaile_ExaileInterface_play_pause_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_exaile_ExaileInterface_play_pause_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_exaile_ExaileInterface_play_pause_async (DBusGProxy *proxy, org_exaile_ExaileInterface_play_pause_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "play_pause", org_exaile_ExaileInterface_play_pause_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_ExaileInterface_get_version (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "get_version", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_exaile_ExaileInterface_get_version_reply) (DBusGProxy *proxy, char * OUT_arg0, GError *error, gpointer userdata);

static void
org_exaile_ExaileInterface_get_version_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_arg0, G_TYPE_INVALID);
  (*(org_exaile_ExaileInterface_get_version_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_exaile_ExaileInterface_get_version_async (DBusGProxy *proxy, org_exaile_ExaileInterface_get_version_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "get_version", org_exaile_ExaileInterface_get_version_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_ExaileInterface_stop (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "stop", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_exaile_ExaileInterface_stop_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_exaile_ExaileInterface_stop_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_exaile_ExaileInterface_stop_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_exaile_ExaileInterface_stop_async (DBusGProxy *proxy, org_exaile_ExaileInterface_stop_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "stop", org_exaile_ExaileInterface_stop_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_ExaileInterface_next (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "next", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_exaile_ExaileInterface_next_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_exaile_ExaileInterface_next_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_exaile_ExaileInterface_next_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_exaile_ExaileInterface_next_async (DBusGProxy *proxy, org_exaile_ExaileInterface_next_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "next", org_exaile_ExaileInterface_next_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_ExaileInterface_prev (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "prev", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_exaile_ExaileInterface_prev_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_exaile_ExaileInterface_prev_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_exaile_ExaileInterface_prev_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_exaile_ExaileInterface_prev_async (DBusGProxy *proxy, org_exaile_ExaileInterface_prev_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "prev", org_exaile_ExaileInterface_prev_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_ExaileInterface_test_service (DBusGProxy *proxy, const char * IN_arg, GError **error)

{
  return dbus_g_proxy_call (proxy, "test_service", error, G_TYPE_STRING, IN_arg, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_exaile_ExaileInterface_test_service_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_exaile_ExaileInterface_test_service_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_exaile_ExaileInterface_test_service_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_exaile_ExaileInterface_test_service_async (DBusGProxy *proxy, const char * IN_arg, org_exaile_ExaileInterface_test_service_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "test_service", org_exaile_ExaileInterface_test_service_async_callback, stuff, g_free, G_TYPE_STRING, IN_arg, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_exaile_ExaileInterface */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_DBus_Introspectable
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_DBus_Introspectable

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_DBus_Introspectable_introspect (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "Introspect", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_DBus_Introspectable_introspect_reply) (DBusGProxy *proxy, char * OUT_arg0, GError *error, gpointer userdata);

static void
org_freedesktop_DBus_Introspectable_introspect_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_arg0, G_TYPE_INVALID);
  (*(org_freedesktop_DBus_Introspectable_introspect_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_DBus_Introspectable_introspect_async (DBusGProxy *proxy, org_freedesktop_DBus_Introspectable_introspect_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Introspect", org_freedesktop_DBus_Introspectable_introspect_async_callback, stuff, g_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_DBus_Introspectable */

G_END_DECLS
