/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_MediaPlayer
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_MediaPlayer

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_get_caps (DBusGProxy *proxy, gint* OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetCaps", error, G_TYPE_INVALID, G_TYPE_INT, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_get_caps_reply) (DBusGProxy *proxy, gint OUT_arg0, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_get_caps_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_arg0, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_get_caps_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_get_caps_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_get_caps_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetCaps", org_freedesktop_MediaPlayer_get_caps_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_get_metadata (DBusGProxy *proxy, GHashTable** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetMetadata", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_get_metadata_reply) (DBusGProxy *proxy, GHashTable *OUT_arg0, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_get_metadata_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_arg0, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_get_metadata_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_get_metadata_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_get_metadata_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetMetadata", org_freedesktop_MediaPlayer_get_metadata_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_get_status (DBusGProxy *proxy, gint* OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetStatus", error, G_TYPE_INVALID, G_TYPE_INT, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_get_status_reply) (DBusGProxy *proxy, gint OUT_arg0, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_get_status_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_arg0, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_get_status_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_get_status_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_get_status_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetStatus", org_freedesktop_MediaPlayer_get_status_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_volume_get (DBusGProxy *proxy, gint* OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "VolumeGet", error, G_TYPE_INVALID, G_TYPE_INT, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_volume_get_reply) (DBusGProxy *proxy, gint OUT_arg0, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_volume_get_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_arg0, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_volume_get_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_volume_get_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_volume_get_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "VolumeGet", org_freedesktop_MediaPlayer_volume_get_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_volume_set (DBusGProxy *proxy, const gint IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "VolumeSet", error, G_TYPE_INT, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_volume_set_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_volume_set_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_volume_set_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_volume_set_async (DBusGProxy *proxy, const gint IN_arg0, org_freedesktop_MediaPlayer_volume_set_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "VolumeSet", org_freedesktop_MediaPlayer_volume_set_async_callback, stuff, g_free, G_TYPE_INT, IN_arg0, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_play (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Play", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_play_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_play_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_play_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_play_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_play_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Play", org_freedesktop_MediaPlayer_play_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_stop (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Stop", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_stop_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_stop_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_stop_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_stop_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_stop_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Stop", org_freedesktop_MediaPlayer_stop_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_pause (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Pause", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_pause_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_pause_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_pause_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_pause_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_pause_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Pause", org_freedesktop_MediaPlayer_pause_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_prev (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Prev", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_prev_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_prev_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_prev_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_prev_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_prev_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Prev", org_freedesktop_MediaPlayer_prev_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_next (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Next", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_next_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_next_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_next_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_next_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_next_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Next", org_freedesktop_MediaPlayer_next_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_play_uris (DBusGProxy *proxy, const char ** IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "PlayUris", error, G_TYPE_STRV, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_play_uris_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_play_uris_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_play_uris_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_play_uris_async (DBusGProxy *proxy, const char ** IN_arg0, org_freedesktop_MediaPlayer_play_uris_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "PlayUris", org_freedesktop_MediaPlayer_play_uris_async_callback, stuff, g_free, G_TYPE_STRV, IN_arg0, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_MediaPlayer */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_beepmediaplayer_bmp
#define DBUS_GLIB_CLIENT_WRAPPERS_org_beepmediaplayer_bmp

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_beepmediaplayer_bmp_ui_raise (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "UiRaise", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_beepmediaplayer_bmp_ui_raise_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_beepmediaplayer_bmp_ui_raise_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_beepmediaplayer_bmp_ui_raise_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_beepmediaplayer_bmp_ui_raise_async (DBusGProxy *proxy, org_beepmediaplayer_bmp_ui_raise_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "UiRaise", org_beepmediaplayer_bmp_ui_raise_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_beepmediaplayer_bmp_startup (DBusGProxy *proxy, const gint IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "Startup", error, G_TYPE_INT, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_beepmediaplayer_bmp_startup_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_beepmediaplayer_bmp_startup_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_beepmediaplayer_bmp_startup_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_beepmediaplayer_bmp_startup_async (DBusGProxy *proxy, const gint IN_arg0, org_beepmediaplayer_bmp_startup_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Startup", org_beepmediaplayer_bmp_startup_async_callback, stuff, g_free, G_TYPE_INT, IN_arg0, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_beepmediaplayer_bmp */

G_END_DECLS
