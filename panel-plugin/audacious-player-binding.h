/* Generated by dbus-binding-tool; do not edit! */

#include <glib/gtypes.h>
#include <glib/gerror.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_MediaPlayer
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_MediaPlayer

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_position_get (DBusGProxy *proxy, gint* OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "PositionGet", error, G_TYPE_INVALID, G_TYPE_INT, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_position_get_reply) (DBusGProxy *proxy, gint OUT_arg0, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_position_get_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_arg0, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_position_get_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_position_get_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_position_get_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "PositionGet", org_freedesktop_MediaPlayer_position_get_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_position_set (DBusGProxy *proxy, const gint IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "PositionSet", error, G_TYPE_INT, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_position_set_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_position_set_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_position_set_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_position_set_async (DBusGProxy *proxy, const gint IN_arg0, org_freedesktop_MediaPlayer_position_set_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "PositionSet", org_freedesktop_MediaPlayer_position_set_async_callback, stuff, g_free, G_TYPE_INT, IN_arg0, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_volume_get (DBusGProxy *proxy, gint* OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "VolumeGet", error, G_TYPE_INVALID, G_TYPE_INT, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_volume_get_reply) (DBusGProxy *proxy, gint OUT_arg0, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_volume_get_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_arg0, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_volume_get_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_volume_get_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_volume_get_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "VolumeGet", org_freedesktop_MediaPlayer_volume_get_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_volume_set (DBusGProxy *proxy, const gint IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "VolumeSet", error, G_TYPE_INT, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_volume_set_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_volume_set_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_volume_set_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_volume_set_async (DBusGProxy *proxy, const gint IN_arg0, org_freedesktop_MediaPlayer_volume_set_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "VolumeSet", org_freedesktop_MediaPlayer_volume_set_async_callback, stuff, g_free, G_TYPE_INT, IN_arg0, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_get_caps (DBusGProxy *proxy, gint* OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetCaps", error, G_TYPE_INVALID, G_TYPE_INT, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_get_caps_reply) (DBusGProxy *proxy, gint OUT_arg0, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_get_caps_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_arg0, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_get_caps_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_get_caps_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_get_caps_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetCaps", org_freedesktop_MediaPlayer_get_caps_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_get_metadata (DBusGProxy *proxy, GHashTable** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetMetadata", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_get_metadata_reply) (DBusGProxy *proxy, GHashTable *OUT_arg0, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_get_metadata_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_arg0, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_get_metadata_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_get_metadata_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_get_metadata_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetMetadata", org_freedesktop_MediaPlayer_get_metadata_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_get_status (DBusGProxy *proxy, gint* OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetStatus", error, G_TYPE_INVALID, G_TYPE_INT, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_get_status_reply) (DBusGProxy *proxy, gint OUT_arg0, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_get_status_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_arg0, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_get_status_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_get_status_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_get_status_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetStatus", org_freedesktop_MediaPlayer_get_status_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_quit (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Quit", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_quit_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_quit_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_quit_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_quit_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_quit_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Quit", org_freedesktop_MediaPlayer_quit_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_repeat (DBusGProxy *proxy, const gboolean IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "Repeat", error, G_TYPE_BOOLEAN, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_repeat_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_repeat_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_repeat_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_repeat_async (DBusGProxy *proxy, const gboolean IN_arg0, org_freedesktop_MediaPlayer_repeat_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Repeat", org_freedesktop_MediaPlayer_repeat_async_callback, stuff, g_free, G_TYPE_BOOLEAN, IN_arg0, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_play (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Play", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_play_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_play_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_play_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_play_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_play_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Play", org_freedesktop_MediaPlayer_play_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_stop (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Stop", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_stop_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_stop_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_stop_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_stop_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_stop_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Stop", org_freedesktop_MediaPlayer_stop_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_pause (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Pause", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_pause_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_pause_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_pause_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_pause_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_pause_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Pause", org_freedesktop_MediaPlayer_pause_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_prev (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Prev", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_prev_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_prev_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_prev_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_prev_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_prev_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Prev", org_freedesktop_MediaPlayer_prev_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_next (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Next", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_next_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_next_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_next_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_next_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_next_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Next", org_freedesktop_MediaPlayer_next_async_callback, stuff, g_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_MediaPlayer */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_MediaPlayer
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_MediaPlayer

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_random (DBusGProxy *proxy, const gboolean IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "Random", error, G_TYPE_BOOLEAN, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_random_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_random_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_random_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_random_async (DBusGProxy *proxy, const gboolean IN_arg0, org_freedesktop_MediaPlayer_random_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Random", org_freedesktop_MediaPlayer_random_async_callback, stuff, g_free, G_TYPE_BOOLEAN, IN_arg0, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_loop (DBusGProxy *proxy, const gboolean IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "Loop", error, G_TYPE_BOOLEAN, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_loop_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_loop_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_loop_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_loop_async (DBusGProxy *proxy, const gboolean IN_arg0, org_freedesktop_MediaPlayer_loop_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Loop", org_freedesktop_MediaPlayer_loop_async_callback, stuff, g_free, G_TYPE_BOOLEAN, IN_arg0, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_del_track (DBusGProxy *proxy, const gint IN_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "DelTrack", error, G_TYPE_INT, IN_arg0, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_del_track_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_del_track_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_del_track_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_del_track_async (DBusGProxy *proxy, const gint IN_arg0, org_freedesktop_MediaPlayer_del_track_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "DelTrack", org_freedesktop_MediaPlayer_del_track_async_callback, stuff, g_free, G_TYPE_INT, IN_arg0, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_add_track (DBusGProxy *proxy, const char * IN_arg0, const gboolean IN_arg1, GError **error)

{
  return dbus_g_proxy_call (proxy, "AddTrack", error, G_TYPE_STRING, IN_arg0, G_TYPE_BOOLEAN, IN_arg1, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_add_track_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_add_track_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_add_track_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_add_track_async (DBusGProxy *proxy, const char * IN_arg0, const gboolean IN_arg1, org_freedesktop_MediaPlayer_add_track_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "AddTrack", org_freedesktop_MediaPlayer_add_track_async_callback, stuff, g_free, G_TYPE_STRING, IN_arg0, G_TYPE_BOOLEAN, IN_arg1, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_get_length (DBusGProxy *proxy, gint* OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetLength", error, G_TYPE_INVALID, G_TYPE_INT, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_get_length_reply) (DBusGProxy *proxy, gint OUT_arg0, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_get_length_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_arg0, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_get_length_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_get_length_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_get_length_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetLength", org_freedesktop_MediaPlayer_get_length_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_get_current_track (DBusGProxy *proxy, gint* OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetCurrentTrack", error, G_TYPE_INVALID, G_TYPE_INT, OUT_arg0, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_get_current_track_reply) (DBusGProxy *proxy, gint OUT_arg0, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_get_current_track_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_arg0;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_arg0, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_get_current_track_reply)data->cb) (proxy, OUT_arg0, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_get_current_track_async (DBusGProxy *proxy, org_freedesktop_MediaPlayer_get_current_track_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetCurrentTrack", org_freedesktop_MediaPlayer_get_current_track_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_MediaPlayer_get_metadata (DBusGProxy *proxy, const gint IN_arg0, GHashTable** OUT_arg1, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetMetadata", error, G_TYPE_INT, IN_arg0, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_arg1, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_MediaPlayer_get_metadata_reply) (DBusGProxy *proxy, GHashTable *OUT_arg1, GError *error, gpointer userdata);

static void
org_freedesktop_MediaPlayer_get_metadata_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_arg1;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_arg1, G_TYPE_INVALID);
  (*(org_freedesktop_MediaPlayer_get_metadata_reply)data->cb) (proxy, OUT_arg1, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_MediaPlayer_get_metadata_async (DBusGProxy *proxy, const gint IN_arg0, org_freedesktop_MediaPlayer_get_metadata_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetMetadata", org_freedesktop_MediaPlayer_get_metadata_async_callback, stuff, g_free, G_TYPE_INT, IN_arg0, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_MediaPlayer */

G_END_DECLS
