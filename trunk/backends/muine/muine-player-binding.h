/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_Muine_Player
#define DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_Muine_Player

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_get_playing (DBusGProxy *proxy, gboolean* OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetPlaying", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_ret, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_get_playing_reply) (DBusGProxy *proxy, gboolean OUT_ret, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_get_playing_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_ret, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_get_playing_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_get_playing_async (DBusGProxy *proxy, org_gnome_Muine_Player_get_playing_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetPlaying", org_gnome_Muine_Player_get_playing_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_set_playing (DBusGProxy *proxy, const gboolean IN_playing, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetPlaying", error, G_TYPE_BOOLEAN, IN_playing, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_set_playing_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_set_playing_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_set_playing_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_set_playing_async (DBusGProxy *proxy, const gboolean IN_playing, org_gnome_Muine_Player_set_playing_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetPlaying", org_gnome_Muine_Player_set_playing_async_callback, stuff, g_free, G_TYPE_BOOLEAN, IN_playing, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_has_next (DBusGProxy *proxy, gboolean* OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "HasNext", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_ret, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_has_next_reply) (DBusGProxy *proxy, gboolean OUT_ret, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_has_next_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_ret, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_has_next_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_has_next_async (DBusGProxy *proxy, org_gnome_Muine_Player_has_next_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "HasNext", org_gnome_Muine_Player_has_next_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_next (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Next", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_next_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_next_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_next_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_next_async (DBusGProxy *proxy, org_gnome_Muine_Player_next_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Next", org_gnome_Muine_Player_next_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_has_previous (DBusGProxy *proxy, gboolean* OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "HasPrevious", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_ret, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_has_previous_reply) (DBusGProxy *proxy, gboolean OUT_ret, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_has_previous_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_ret, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_has_previous_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_has_previous_async (DBusGProxy *proxy, org_gnome_Muine_Player_has_previous_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "HasPrevious", org_gnome_Muine_Player_has_previous_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_previous (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Previous", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_previous_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_previous_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_previous_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_previous_async (DBusGProxy *proxy, org_gnome_Muine_Player_previous_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Previous", org_gnome_Muine_Player_previous_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_get_current_song (DBusGProxy *proxy, char ** OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetCurrentSong", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_ret, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_get_current_song_reply) (DBusGProxy *proxy, char * OUT_ret, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_get_current_song_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_ret, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_get_current_song_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_get_current_song_async (DBusGProxy *proxy, org_gnome_Muine_Player_get_current_song_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetCurrentSong", org_gnome_Muine_Player_get_current_song_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_get_window_visible (DBusGProxy *proxy, gboolean* OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetWindowVisible", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_ret, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_get_window_visible_reply) (DBusGProxy *proxy, gboolean OUT_ret, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_get_window_visible_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_ret, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_get_window_visible_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_get_window_visible_async (DBusGProxy *proxy, org_gnome_Muine_Player_get_window_visible_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetWindowVisible", org_gnome_Muine_Player_get_window_visible_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_set_window_visible (DBusGProxy *proxy, const gboolean IN_visible, const guint IN_time, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetWindowVisible", error, G_TYPE_BOOLEAN, IN_visible, G_TYPE_UINT, IN_time, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_set_window_visible_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_set_window_visible_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_set_window_visible_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_set_window_visible_async (DBusGProxy *proxy, const gboolean IN_visible, const guint IN_time, org_gnome_Muine_Player_set_window_visible_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetWindowVisible", org_gnome_Muine_Player_set_window_visible_async_callback, stuff, g_free, G_TYPE_BOOLEAN, IN_visible, G_TYPE_UINT, IN_time, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_get_volume (DBusGProxy *proxy, gint* OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetVolume", error, G_TYPE_INVALID, G_TYPE_INT, OUT_ret, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_get_volume_reply) (DBusGProxy *proxy, gint OUT_ret, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_get_volume_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_ret, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_get_volume_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_get_volume_async (DBusGProxy *proxy, org_gnome_Muine_Player_get_volume_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetVolume", org_gnome_Muine_Player_get_volume_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_set_volume (DBusGProxy *proxy, const gint IN_volume, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetVolume", error, G_TYPE_INT, IN_volume, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_set_volume_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_set_volume_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_set_volume_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_set_volume_async (DBusGProxy *proxy, const gint IN_volume, org_gnome_Muine_Player_set_volume_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetVolume", org_gnome_Muine_Player_set_volume_async_callback, stuff, g_free, G_TYPE_INT, IN_volume, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_get_position (DBusGProxy *proxy, gint* OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetPosition", error, G_TYPE_INVALID, G_TYPE_INT, OUT_ret, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_get_position_reply) (DBusGProxy *proxy, gint OUT_ret, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_get_position_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_ret, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_get_position_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_get_position_async (DBusGProxy *proxy, org_gnome_Muine_Player_get_position_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetPosition", org_gnome_Muine_Player_get_position_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_set_position (DBusGProxy *proxy, const gint IN_pos, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetPosition", error, G_TYPE_INT, IN_pos, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_set_position_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_set_position_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_set_position_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_set_position_async (DBusGProxy *proxy, const gint IN_pos, org_gnome_Muine_Player_set_position_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetPosition", org_gnome_Muine_Player_set_position_async_callback, stuff, g_free, G_TYPE_INT, IN_pos, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_play_album (DBusGProxy *proxy, const guint IN_time, GError **error)

{
  return dbus_g_proxy_call (proxy, "PlayAlbum", error, G_TYPE_UINT, IN_time, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_play_album_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_play_album_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_play_album_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_play_album_async (DBusGProxy *proxy, const guint IN_time, org_gnome_Muine_Player_play_album_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "PlayAlbum", org_gnome_Muine_Player_play_album_async_callback, stuff, g_free, G_TYPE_UINT, IN_time, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_play_song (DBusGProxy *proxy, const guint IN_time, GError **error)

{
  return dbus_g_proxy_call (proxy, "PlaySong", error, G_TYPE_UINT, IN_time, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_play_song_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_play_song_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_play_song_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_play_song_async (DBusGProxy *proxy, const guint IN_time, org_gnome_Muine_Player_play_song_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "PlaySong", org_gnome_Muine_Player_play_song_async_callback, stuff, g_free, G_TYPE_UINT, IN_time, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_open_playlist (DBusGProxy *proxy, const char * IN_uri, GError **error)

{
  return dbus_g_proxy_call (proxy, "OpenPlaylist", error, G_TYPE_STRING, IN_uri, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_open_playlist_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_open_playlist_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_open_playlist_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_open_playlist_async (DBusGProxy *proxy, const char * IN_uri, org_gnome_Muine_Player_open_playlist_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "OpenPlaylist", org_gnome_Muine_Player_open_playlist_async_callback, stuff, g_free, G_TYPE_STRING, IN_uri, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_play_file (DBusGProxy *proxy, const char * IN_uri, GError **error)

{
  return dbus_g_proxy_call (proxy, "PlayFile", error, G_TYPE_STRING, IN_uri, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_play_file_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_play_file_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_play_file_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_play_file_async (DBusGProxy *proxy, const char * IN_uri, org_gnome_Muine_Player_play_file_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "PlayFile", org_gnome_Muine_Player_play_file_async_callback, stuff, g_free, G_TYPE_STRING, IN_uri, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_queue_file (DBusGProxy *proxy, const char * IN_uri, GError **error)

{
  return dbus_g_proxy_call (proxy, "QueueFile", error, G_TYPE_STRING, IN_uri, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_queue_file_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_queue_file_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_queue_file_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_queue_file_async (DBusGProxy *proxy, const char * IN_uri, org_gnome_Muine_Player_queue_file_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "QueueFile", org_gnome_Muine_Player_queue_file_async_callback, stuff, g_free, G_TYPE_STRING, IN_uri, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_write_album_cover_to_file (DBusGProxy *proxy, const char * IN_file, gboolean* OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "WriteAlbumCoverToFile", error, G_TYPE_STRING, IN_file, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_ret, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_write_album_cover_to_file_reply) (DBusGProxy *proxy, gboolean OUT_ret, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_write_album_cover_to_file_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gboolean OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_BOOLEAN, &OUT_ret, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_write_album_cover_to_file_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_write_album_cover_to_file_async (DBusGProxy *proxy, const char * IN_file, org_gnome_Muine_Player_write_album_cover_to_file_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "WriteAlbumCoverToFile", org_gnome_Muine_Player_write_album_cover_to_file_async_callback, stuff, g_free, G_TYPE_STRING, IN_file, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_get_album_cover (DBusGProxy *proxy, GArray** OUT_ret, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetAlbumCover", error, G_TYPE_INVALID, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), OUT_ret, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_get_album_cover_reply) (DBusGProxy *proxy, GArray *OUT_ret, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_get_album_cover_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GArray* OUT_ret;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), &OUT_ret, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_get_album_cover_reply)data->cb) (proxy, OUT_ret, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_get_album_cover_async (DBusGProxy *proxy, org_gnome_Muine_Player_get_album_cover_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetAlbumCover", org_gnome_Muine_Player_get_album_cover_async_callback, stuff, g_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Muine_Player_quit (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Quit", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Muine_Player_quit_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Muine_Player_quit_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Muine_Player_quit_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Muine_Player_quit_async (DBusGProxy *proxy, org_gnome_Muine_Player_quit_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Quit", org_gnome_Muine_Player_quit_async_callback, stuff, g_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_Muine_Player */

G_END_DECLS
