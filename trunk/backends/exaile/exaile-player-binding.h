/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_exaile_DBusInterface
#define DBUS_GLIB_CLIENT_WRAPPERS_org_exaile_DBusInterface

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_get_cover_path (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "get_cover_path", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_decrease_volume (DBusGProxy *proxy, const guchar IN_vol, GError **error)

{
  return dbus_g_proxy_call (proxy, "decrease_volume", error, G_TYPE_UCHAR, IN_vol, G_TYPE_INVALID, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_get_volume (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "get_volume", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_prev_track (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "prev_track", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_get_title (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "get_title", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_popup (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "popup", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_query (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "query", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_play_file (DBusGProxy *proxy, const char * IN_filename, GError **error)

{
  return dbus_g_proxy_call (proxy, "play_file", error, G_TYPE_STRING, IN_filename, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_set_rating (DBusGProxy *proxy, const guchar IN_rating, GError **error)

{
  return dbus_g_proxy_call (proxy, "set_rating", error, G_TYPE_UCHAR, IN_rating, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_get_version (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "get_version", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_get_album (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "get_album", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_get_rating (DBusGProxy *proxy, gint* OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "get_rating", error, G_TYPE_INVALID, G_TYPE_INT, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_status (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "status", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_get_length (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "get_length", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_play (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "play", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_current_position (DBusGProxy *proxy, guchar* OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "current_position", error, G_TYPE_INVALID, G_TYPE_UCHAR, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_play_pause (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "play_pause", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_next_track (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "next_track", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_stop (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "stop", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_increase_volume (DBusGProxy *proxy, const guchar IN_vol, GError **error)

{
  return dbus_g_proxy_call (proxy, "increase_volume", error, G_TYPE_UCHAR, IN_vol, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_get_track_attr (DBusGProxy *proxy, const char * IN_attr, char ** OUT_arg1, GError **error)

{
  return dbus_g_proxy_call (proxy, "get_track_attr", error, G_TYPE_STRING, IN_attr, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg1, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_get_artist (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "get_artist", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_play_cd (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "play_cd", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_toggle_visibility (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "toggle_visibility", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_popup_text (DBusGProxy *proxy, const GValue* IN_text, GError **error)

{
  return dbus_g_proxy_call (proxy, "popup_text", error, G_TYPE_VALUE, IN_text, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_DBusInterface_test_service (DBusGProxy *proxy, const char * IN_arg, GError **error)

{
  return dbus_g_proxy_call (proxy, "test_service", error, G_TYPE_STRING, IN_arg, G_TYPE_INVALID, G_TYPE_INVALID);
}

#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_exaile_DBusInterface */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_exaile_Exaile
#define DBUS_GLIB_CLIENT_WRAPPERS_org_exaile_Exaile

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_stop_after_current (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "StopAfterCurrent", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_play (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Play", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_get_volume (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetVolume", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_current_position (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "CurrentPosition", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_stop (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Stop", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_set_track_attr (DBusGProxy *proxy, const char * IN_attr, const GValue* IN_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetTrackAttr", error, G_TYPE_STRING, IN_attr, G_TYPE_VALUE, IN_value, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_next (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Next", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_enqueue (DBusGProxy *proxy, const char ** IN_filenames, GError **error)

{
  return dbus_g_proxy_call (proxy, "Enqueue", error, G_TYPE_STRV, IN_filenames, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_change_volume (DBusGProxy *proxy, const gint IN_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "ChangeVolume", error, G_TYPE_INT, IN_value, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_play_file (DBusGProxy *proxy, const char * IN_filename, GError **error)

{
  return dbus_g_proxy_call (proxy, "PlayFile", error, G_TYPE_STRING, IN_filename, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_play_pause (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "PlayPause", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_test_service (DBusGProxy *proxy, const char * IN_arg, GError **error)

{
  return dbus_g_proxy_call (proxy, "TestService", error, G_TYPE_STRING, IN_arg, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_is_playing (DBusGProxy *proxy, gboolean* OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "IsPlaying", error, G_TYPE_INVALID, G_TYPE_BOOLEAN, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_get_status (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetStatus", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_get_track_attr (DBusGProxy *proxy, const char * IN_attr, char ** OUT_retval, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetTrackAttr", error, G_TYPE_STRING, IN_attr, G_TYPE_INVALID, G_TYPE_STRING, OUT_retval, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_query (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "Query", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_get_version (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetVersion", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_prev (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Prev", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_exaile_Exaile_current_progress (DBusGProxy *proxy, char ** OUT_arg0, GError **error)

{
  return dbus_g_proxy_call (proxy, "CurrentProgress", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_arg0, G_TYPE_INVALID);
}

#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_exaile_Exaile */

G_END_DECLS
