/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_notifications
#define DBUS_GLIB_CLIENT_WRAPPERS_notifications

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
notifications_get_server_information (DBusGProxy *proxy, char ** OUT_return_name, char ** OUT_return_vendor, char ** OUT_return_version, char ** OUT_return_spec_version, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetServerInformation", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_return_name, G_TYPE_STRING, OUT_return_vendor, G_TYPE_STRING, OUT_return_version, G_TYPE_STRING, OUT_return_spec_version, G_TYPE_INVALID);
}

typedef void (*notifications_get_server_information_reply) (DBusGProxy *proxy, char * OUT_return_name, char * OUT_return_vendor, char * OUT_return_version, char * OUT_return_spec_version, GError *error, gpointer userdata);

static void
notifications_get_server_information_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_return_name;
  char * OUT_return_vendor;
  char * OUT_return_version;
  char * OUT_return_spec_version;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_return_name, G_TYPE_STRING, &OUT_return_vendor, G_TYPE_STRING, &OUT_return_version, G_TYPE_STRING, &OUT_return_spec_version, G_TYPE_INVALID);
  (*(notifications_get_server_information_reply)data->cb) (proxy, OUT_return_name, OUT_return_vendor, OUT_return_version, OUT_return_spec_version, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
notifications_get_server_information_async (DBusGProxy *proxy, notifications_get_server_information_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetServerInformation", notifications_get_server_information_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
notifications_get_capabilities (DBusGProxy *proxy, char *** OUT_return_caps, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetCapabilities", error, G_TYPE_INVALID, G_TYPE_STRV, OUT_return_caps, G_TYPE_INVALID);
}

typedef void (*notifications_get_capabilities_reply) (DBusGProxy *proxy, char * *OUT_return_caps, GError *error, gpointer userdata);

static void
notifications_get_capabilities_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_return_caps;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_return_caps, G_TYPE_INVALID);
  (*(notifications_get_capabilities_reply)data->cb) (proxy, OUT_return_caps, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
notifications_get_capabilities_async (DBusGProxy *proxy, notifications_get_capabilities_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetCapabilities", notifications_get_capabilities_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
notifications_close_notification (DBusGProxy *proxy, const guint IN_id, GError **error)

{
  return dbus_g_proxy_call (proxy, "CloseNotification", error, G_TYPE_UINT, IN_id, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*notifications_close_notification_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
notifications_close_notification_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(notifications_close_notification_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
notifications_close_notification_async (DBusGProxy *proxy, const guint IN_id, notifications_close_notification_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "CloseNotification", notifications_close_notification_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_UINT, IN_id, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
notifications_notify (DBusGProxy *proxy, const char * IN_app_name, const guint IN_id, const char * IN_icon, const char * IN_summary, const char * IN_body, const char ** IN_actions, const GHashTable* IN_hints, const gint IN_timeout, guint* OUT_return_id, GError **error)

{
  return dbus_g_proxy_call (proxy, "Notify", error, G_TYPE_STRING, IN_app_name, G_TYPE_UINT, IN_id, G_TYPE_STRING, IN_icon, G_TYPE_STRING, IN_summary, G_TYPE_STRING, IN_body, G_TYPE_STRV, IN_actions, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_hints, G_TYPE_INT, IN_timeout, G_TYPE_INVALID, G_TYPE_UINT, OUT_return_id, G_TYPE_INVALID);
}

typedef void (*notifications_notify_reply) (DBusGProxy *proxy, guint OUT_return_id, GError *error, gpointer userdata);

static void
notifications_notify_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  guint OUT_return_id;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_UINT, &OUT_return_id, G_TYPE_INVALID);
  (*(notifications_notify_reply)data->cb) (proxy, OUT_return_id, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
notifications_notify_async (DBusGProxy *proxy, const char * IN_app_name, const guint IN_id, const char * IN_icon, const char * IN_summary, const char * IN_body, const char ** IN_actions, const GHashTable* IN_hints, const gint IN_timeout, notifications_notify_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Notify", notifications_notify_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_app_name, G_TYPE_UINT, IN_id, G_TYPE_STRING, IN_icon, G_TYPE_STRING, IN_summary, G_TYPE_STRING, IN_body, G_TYPE_STRV, IN_actions, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_hints, G_TYPE_INT, IN_timeout, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_notifications */

G_END_DECLS

#endif
